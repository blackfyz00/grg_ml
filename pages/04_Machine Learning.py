import streamlit as st
import pandas as pd
import pickle
import os
import lightgbm

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Trip Duration Prediction", layout="centered")
st.title("üöó –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏")

st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥–µ–ª—è–º–∏
models_dir = "models"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–∫–∏ models
if not os.path.exists(models_dir):
    st.error(f"–ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {models_dir}")
else:
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .pkl —Ñ–∞–π–ª–æ–≤
    model_files = [f for f in os.listdir(models_dir) if f.endswith('.pkl')]

    if not model_files:
        st.warning("–í –ø–∞–ø–∫–µ models –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π (.pkl —Ñ–∞–π–ª–æ–≤)")
    else:
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", model_files)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        model_path = os.path.join(models_dir, selected_model)
        with open(model_path, "rb") as f:
            model = pickle.load(f)
        st.success(f"‚úÖ –ú–æ–¥–µ–ª—å '{selected_model}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª")
            uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"])
            if uploaded_file:
                try:
                    df_uploaded = pd.read_csv(uploaded_file)
                    st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                    st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:")
                    st.dataframe(df_uploaded.head())

                    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ —Ñ–∞–π–ª—É
                    if 'trip_duration' in df_uploaded.columns:
                        X = df_uploaded.drop(columns=['trip_duration'])
                    else:
                        X = df_uploaded

                    predictions = model.predict(X)
                    df_uploaded['predicted_trip_duration'] = predictions
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏",
                        data=df_uploaded.to_csv(index=False),
                        file_name="predictions.csv",
                        mime="text/csv"
                    )
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

        with col2:
            st.subheader("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é")

            passenger_count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤", min_value=1, max_value=10, value=1)
            trip_distance_km = st.number_input("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏, –∫–º", min_value=0.1, max_value=100.0, value=5.0)
            month = st.selectbox("–ú–µ—Å—è—Ü", list(range(1, 13)), format_func=lambda x: f"{x} –º–µ—Å—è—Ü")
            date = st.slider("–î–∞—Ç–∞ (—á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞)", 1, 31, 15)

            country = st.radio("–°—Ç—Ä–∞–Ω–∞", ["Canada", "United States of America"])
            country_Canada = 1 if country == "Canada" else 0
            country_United_States_of_America = 1 if country == "United States of America" else 0

            daytime = st.selectbox("–í—Ä–µ–º—è —Å—É—Ç–æ–∫", ["morning", "afternoon", "evening", "night"])
            daytime_morning = 1 if daytime == "morning" else 0
            daytime_afternoon = 1 if daytime == "afternoon" else 0
            daytime_evening = 1 if daytime == "evening" else 0
            daytime_night = 1 if daytime == "night" else 0

            if st.button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
                input_data = pd.DataFrame({
                    'passenger_count': [passenger_count],
                    'trip_distance_km': [trip_distance_km],
                    'month': [month],
                    'date': [date],
                    'country_Canada': [country_Canada],
                    'country_United States of America': [country_United_States_of_America],
                    'daytime_morning': [daytime_morning],
                    'daytime_afternoon': [daytime_afternoon],
                    'daytime_evening': [daytime_evening],
                    'daytime_night': [daytime_night]
                })

                prediction = model.predict(input_data)[0]
                st.success(f"‚è≥ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: **{round(prediction/60, 2)} –º–∏–Ω—É—Ç**")

# –ü–æ–¥–≤–∞–ª
st.markdown("---")
st.markdown("¬© 2025 ‚Äî ML Trip Predictor App")